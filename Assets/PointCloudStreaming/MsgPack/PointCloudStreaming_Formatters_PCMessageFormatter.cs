// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace PointCloudStreaming.Formatters
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class PCMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PCMessage>
    {
        // size
        private static global::System.ReadOnlySpan<byte> GetSpan_size() => new byte[1 + 4] { 164, 115, 105, 122, 101 };
        // pcl
        private static global::System.ReadOnlySpan<byte> GetSpan_pcl() => new byte[1 + 3] { 163, 112, 99, 108 };
        // pcl_color
        private static global::System.ReadOnlySpan<byte> GetSpan_pcl_color() => new byte[1 + 9] { 169, 112, 99, 108, 95, 99, 111, 108, 111, 114 };
        // point_size
        private static global::System.ReadOnlySpan<byte> GetSpan_point_size() => new byte[1 + 10] { 170, 112, 111, 105, 110, 116, 95, 115, 105, 122, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::PCMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_size());
            writer.Write(value.size);
            writer.WriteRaw(GetSpan_pcl());
            writer.Write(value.pcl);
            writer.WriteRaw(GetSpan_pcl_color());
            writer.Write(value.pcl_color);
            writer.WriteRaw(GetSpan_point_size());
            writer.Write(value.point_size);
        }

        public global::PCMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __size__ = default(int);
            var __pcl__ = default(byte[]);
            var __pcl_color__ = default(byte[]);
            var __point_size__ = default(float);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1702521203UL) { goto FAIL; }

                        __size__ = reader.ReadInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7103344UL) { goto FAIL; }

                        __pcl__ = reader.ReadBytes()?.ToArray();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_pcl_color().Slice(1))) { goto FAIL; }

                        __pcl_color__ = reader.ReadBytes()?.ToArray();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_point_size().Slice(1))) { goto FAIL; }

                        __point_size__ = reader.ReadSingle();
                        continue;

                }
            }

            var ____result = new global::PCMessage()
            {
                size = __size__,
                pcl = __pcl__,
                pcl_color = __pcl_color__,
                point_size = __point_size__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}
